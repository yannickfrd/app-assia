# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    documents_directory: "%kernel.project_dir%/public/uploads/documents/"
    downloads_directory: "%kernel.project_dir%/public/downloads/"
    app_env: "%env(APP_ENV)%"
    admin_email: "%env(ADMIN_EMAIL)%"

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        bind:
            $adminEmail: "%admin_email%"
            $appEnv: "%app_env%"

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: "../src/*"
        exclude: "../src/{DependencyInjection,Entity,Migrations,Tests,Kernel.php}"

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: "../src/Controller"
        tags: ["controller.service_arguments"]

    App\Command\DeleteHardDocumentsCommand:
        arguments:
            $documentsDirectory: "%documents_directory%"

    App\Controller\Document\DocumentController:
        arguments:
            $documentsDirectory: "%documents_directory%"

    App\DataFixtures\Processor\UserProcessor:
        tags: [{ name: fidry_alice_data_fixtures.processor }]
        arguments:
            - "@security.user_password_encoder.generic"

    App\EventListener\ExceptionListener:
        tags:
            - { name: "kernel.event_listener", event: "kernel.exception" }
        arguments:
            $exceptionListener: "%env(EXCEPTION_LISTENER)%"

    # App\EventSubscriber\ExceptionSubscriber:
    #     arguments:
    #         $exceptionListener: '%env(EXCEPTION_LISTENER)%'

    App\EventListener\LoginListener:
        tags:
            - {
                  name: "kernel.event_listener",
                  event: "security.interactive_login",
              }

    App\EventListener\MaintenanceListener:
        tags:
            - {
                  name: "kernel.event_listener",
                  event: "kernel.request",
                  method: "onKernelRequest",
              }
        arguments:
            $maintenance: "%env(MAINTENANCE)%"

    # App\EventListener\ResponseListener:
    #     tags:
    #         - { name: 'kernel.event_listener', event: 'kernel.response', method: 'onKernelResponse' }

    App\EventListener\TerminateListener:
        tags:
            - { name: "kernel.event_listener", event: "kernel.terminate" }

    App\Notification\MailNotifier:
        arguments:
            $appVersion: "%env(APP_VERSION)%"
            $appEnv: "%app_env%"

    App\Service\DumpDatabase:
        arguments:
            $databaseName: "%env(DB_DATABASE_NAME)%"
            $userName: "%env(DB_USERNAME)%"
            $password: "%env(DB_PASSWORD)%"
            $host: "%env(DB_HOST)%"
            $pathMySqlDump: "%env(PATH_MYSQLDUMP)%"

    App\Service\File\FileUploader:
        arguments:
            $targetDirectory: "%documents_directory%"

    App\Service\File\FileDownloader:
        arguments:
            $documentsDirectory: "%documents_directory%"
            $downloadsDirectory: "%downloads_directory%"

    app.filter.grayscale_filter:
        class: App\Service\File\ImageFilter\GrayscaleFilter
        tags:
            - { name: "liip_imagine.filter.loader", loader: grayscale_filter }

    app.filter.portrait_rotation_filter:
        class: App\Service\File\ImageFilter\PortraitRotationFilter
        tags:
            - {
                  name: "liip_imagine.filter.loader",
                  loader: portrait_rotation_filter,
              }

    app.filter.sharpen_filter:
        class: App\Service\File\ImageFilter\SharpenFilter
        tags:
            - { name: "liip_imagine.filter.loader", loader: sharpen_filter }

    # App\Twig\AppExtension:
    #     lazy: true

    Twig\CacheExtension\CacheProviderInterface:
        class: Twig\CacheExtension\CacheProvider\PsrCacheAdapter

    Twig\CacheExtension\CacheStrategyInterface:
        class: Twig\CacheExtension\CacheStrategy\LifetimeCacheStrategy

    Twig\CacheExtension\Extension:
        tags:
            - { name: twig.extension }

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones
    Tinify\Tinify: ~
    Tinify\Source: ~
